@model ML.Usuario

@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class=" container">
    <div class="row">
        <div class="col-md-12">
            <h2>Usuario</h2>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h5>Ingrese los datos del usuario</h5>
        </div>
    </div>

    @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.IdUsuario, new { @class = "visually-hidden-focusable" })
                @Html.TextBoxFor(model => model.IdUsuario, new { @class = "form-control visually-hidden-focusable", @id = "txtIdUsuario" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.UserName)
                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", placeholder = " Username", @id = "txtUserName" })
                @Html.ValidationMessageFor(model => model.UserName)
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Nombre)
                @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", placeholder = " Nombre", @onkeypress = "return ValidarSoloLetras(event,'lblNombre')", @id = "txtNombre" })
                @Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "text-danger", @id = "lblNombre" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ApellidoPaterno)
                @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", placeholder = " ApellidoPaterno", @onkeypress = "return ValidarSoloLetras(event, 'lblApellidoPaterno')", @id = "txtApellidoPaterno" })
                @Html.ValidationMessageFor(model => model.ApellidoPaterno, null, new { @class = "text-danger", @id = "lblApellidoPaterno" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ApellidoMaterno)
                @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", placeholder = " ApellidoMaterno", @onkeypress = "return ValidarSoloLetras(event, 'lblApellidoMaterno')", @id = "txtApellidoMaterno" })
                @Html.ValidationMessageFor(model => model.ApellidoMaterno, null, new { @class = "text-danger", @id = "lblApellidoMaterno" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Email)
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = " Email", @onkeypress = "return ValidarSoloCorreo(event)", @id = "txtCorreo" })
                @Html.ValidationMessageFor(model => model.Email, null, new { @class = "text-danger", @id = "lblEmail" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Email)
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = " Confirma tu correo de nuevo", @onblur = "return ValidarCorreos()", @id = "txtCorreo2" })
                @Html.ValidationMessageFor(model => model.Email)
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Password)
                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", placeholder = " Password", @onkeypress = "return ValidarSoloContrasena(event)", @id = "txtContrasena" })
                @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger", @id = "lblContrasena" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Password)
                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", placeholder = " Password", @onblur = "return ValidarContrasenas()", @id = "txtContrasena2" })
                @Html.ValidationMessageFor(model => model.Password)
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Sexo)
                @Html.TextBoxFor(model => model.Sexo, new { @class = "form-control", placeholder = " Sexo", @id = "txtSexo" })
                @Html.ValidationMessageFor(model => model.Sexo, null, new { @class = "text-danger", @id = "lblSexo" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Telefono)
                @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", placeholder = " Telefono", @onkeypress = "return ValidarNumero(event, 'lblTelefono')", @id = "txtTelefono" })
                @Html.ValidationMessageFor(model => model.Telefono, null, new { @class = "text-danger", @id = "lblTelefono" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Celular)
                @Html.TextBoxFor(model => model.Celular, new { @class = "form-control", placeholder = " Celular", @onkeypress = "return ValidarNumero(event, 'lblCelular')", @id = "txtCelular" })
                @Html.ValidationMessageFor(model => model.Celular, null, new { @class = "text-danger", @id = "lblCelular" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.FechaNacimiento)
                @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control", placeholder = " FechaNacimiento", @onkeypress = "return ValidarFecha(event)", @id = "txtFecha" })
                @Html.ValidationMessageFor(model => model.FechaNacimiento, null, new { @class = "text-danger", @id = "lblFechaNacimiento" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CURP)
                @Html.TextBoxFor(model => model.CURP, new { @class = "form-control", placeholder = " CURP", @onblur = "return ValidarCurp()", @id = "txtCurp" })
                @Html.ValidationMessageFor(model => model.CURP, null, new { @class = "text-danger", @id = "lblCurp" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Rol.IdRol)
                <br />
                @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Rols, "IdRol", "Nombre"), "Seleccione una opción", new { @class = "form-control" })

            </div>
        </div>



        //imagen
        <div class="row">
            <div class="col-md-12">
                @*@Html.LabelFor(model => model.Imagen)*@
                @Html.HiddenFor(model => model.Imagen)
                <br />
                <input type="file" id="fuimgUsuario" name="fuimgUsuario" onchange="PreviewImage(event)" />
                <br />
                @if (Model.Imagen == null)
                {
                    <img id="imgUsuario" src="~/Images/usuario.jpg" style="width:250px; height:200px;" />
                }
                else
                {
                    <img id="imgUsuario" src="data:image/jpg;base64,@Convert.ToBase64String(Model.Imagen)" style="width:250px; height:200px;" />
                }
            </div>
        </div>

        //Statu
       


        //BL.Direccion
        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Direccion.Calle)
                @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control", placeholder = " Calle" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Direccion.NumeroInterior)
                @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control", placeholder = " NumeroInterior" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Direccion.NumeroExterior)
                @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control", placeholder = " NumeroExterior" })
            </div>
        </div>

        @*Listas anidadas*@

        @*Listas Pais*@
        <div class="row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.Pais)
                <br />
                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "Nombre"), "Seleccione un pais", new { @class = "form-control", @id = "ddlPais" })
            </div>
            @*Estados*@
            <div class="col-md-3">
                @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado)
                <br />
                @if (Model.Direccion.Colonia.Municipio.Estado.Estados != null)
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Seleccione un estado", new { @class = "form-control", @id = "ddlEstado" })

                }
                else
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(string.Empty, "IdEstado", "Nombre"), "Seleccione un estado", new { @class = "form-control", @id = "ddlEstado" })

                }

            </div>
        </div>

        @*Municipio*@
        <div class="row">
            <div class="col-md-3">
                @Html.LabelFor(model => model.Direccion.Colonia.Municipio)
                <br />
                @if (Model.Direccion.Colonia.Municipio.Municipios != null)
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Seleccione un municipio", new { @class = "form-control", @id = "ddlMunicipio" })

                }
                else
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(string.Empty, "IdMunicipio", "Nombre"), "Seleccione un municipio", new { @class = "form-control", @id = "ddlMunicipio" })

                }
            </div>
            @*Colonia*@
            <div class="col-md-3">
                @Html.LabelFor(model => model.Direccion.Colonia)
                <br />
                @if (Model.Direccion.Colonia.Colonias != null)
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Seleccione una colonia", new { @class = "form-control", @id = "ddlColonia" })

                }
                else
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(string.Empty, "IdColonia", "Nombre"), "Seleccione una colonia", new { @class = "form-control", @id = "ddlColonia" })

                }

            </div>
        </div>

        <br />
        <div class="row">
            <div class="col-md-1">
                <button type="submit" class="btn btn-success"> Guardar</button>
            </div>
            <div class="col-md-1">
                @Html.ActionLink("Cancelar", "GetAll", "Usuario", new { @class = "btn btn-danger" })
            </div>
        </div>
    }
</div>

@*IMAGEN*@
<script type="text/javascript">
    function PreviewImage(event) {
        var output = document.getElementById("imgUsuario");
        output.src = URL.createObjectURL(event.target.files[0]);
        output.onload = function () {
            URL.revokeObjectURL(output.src);
        }
    };

</script>

@*DropDownList*@
<script src="~/Scripts/jquery-3.4.1.js"></script>

<script type="text/javascript">
    $(document).ready(function (){
        $("#ddlPais").change(function(){
            $("#ddlEstado").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("EstadoGetByIdPais")',
                dataType: 'json',
                data: { IdPais: $("#ddlPais").val()},
                success: function (estados){
        $("#ddlEstado").append('<option value="0">' + 'Seleccione un estado' + '</option>');
    $.each(estados, function (i , estados){
        $("#ddlEstado").append('<option value="'
	    + estados.IdEstado + '">'
	    + estados.Nombre + '</option>');

    });
    },
    error: function (ex) {
	    alert ('Failed. ' + ex);
    }
    });
    });
    });
</script>


<script type="text/javascript">
    $(document).ready(function (){
        $("#ddlEstado").change(function(){
            $("#ddlMunicipio").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("MunicipioGetByIdEstado")',
                dataType: 'json',
                data: { IdEstado: $("#ddlEstado").val()},
                success: function (municipios){
                    $("#ddlMunicipio").append('<option value="0">' + 'Seleccione un municipio' + '</option>');
                    $.each(municipios, function (i, municipios){
        $("#ddlMunicipio").append('<option value="'
            + municipios.IdMunicipio + '">'
            + municipios.Nombre + '</option>');

    });
    },
    error: function (ex) {
	    alert ('Failed. ' + ex);
    }
    });
    });
    });
</script>

<script type="text/javascript">
    $(document).ready(function (){
        $("#ddlMunicipio").change(function(){
            $("#ddlColonia").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ColoniaGetByIdMunicipio")',
                dataType: 'json',
                data: { IdMunicipio: $("#ddlMunicipio").val()},
                success: function (colonias){
                    $("#ddlColonia").append('<option value="0">' + 'Seleccione una colonia' + '</option>');
                    $.each(colonias, function (i, colonias){
                        $("#ddlColonia").append('<option value="'
                            + colonias.IdColonia + '">'
                            + colonias.Nombre + '</option>');

                        });
                     },
                    error: function (ex) {
	                        alert ('Failed. ' + ex);
                 }
            });
        });
    });
</script>

@*Validaciones REGEX*@

<link rel="stylesheet" href="//apps.bdimg.com/libs/jqueryui/1.10.4/css/jquery-ui.min.css">
<script src="//apps.bdimg.com/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//apps.bdimg.com/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery-3.4.1.js"></script>
<link rel="stylesheet" href="jqueryui/style.css">


<script type="text/javascript">
    /*Solo letras*/
    function ValidarSoloLetras(event, controlId) {

        var letra = event.key;
        //var regexLetters = /^[A-Za-z\s]+$/;
        var regexLetters = /^[A-Za-z\s]$/;

        if (regexLetters.test(letra)) {
            $('#' + controlId).text("Valido");
            $('#' + controlId).css({ "color": "green" });
            return true;
        }
        else {
            $('#' + controlId).text(letra + "Solo acepta caracteres");
            $('#' + controlId).css({ "color": "red" });
            return false;
        }

    }
    /*Solo correo*/
    function ValidarSoloCorreo(event) {

        var correo = event.key;
        var regexCorreo = /^[a-zA-Z0-9\._-]@@[a-zA-Z0-9-]{2,}[.][a-zA-Z]{2,4}$/;

        if (regexCorreo.test(correo)) {
            return true;
        }
        else {
            return false;
        }
    }
    /*Solo contraseña*/
    function ValidarSoloContrasena(event) {
        var contraseña = event.key;
        var regexContraseña = /((?=.*\d)(?=*[a-z])(?=.*[A-Z])(?=*[\W]){8,64})/g;

        if (regexContraseña.test(contraseña)) {
            return true;
        }
        else {
            return false;
        }

    }

</script>

<script type="text/javascript">

    /*Solo fecha*/
    function ValidarFecha(event) {

        var fecha = event.key;
        var regexdate = /^([012][1-9]|3[01])(\/)(0[1-9]|1[012])\2(\d{4})$/;


        const CURRENT_YEAR = new Date().getFullYear()

        /* Comprobar formato dd/mm/yyyy, que el no sea mayor de 12 y los días mayores de 31 */
        if (fecha.match(regexdate)) {
            return false
        }

        /* Comprobar los días del mes */
        const day = parseInt(fecha.split('-')[0])
        const month = parseInt(fecha.split('-')[1])
        const year = parseInt(fecha.split('-')[2])
        const monthDays = new Date(year, month, 0).getDate()
        if (day > monthDays) {
            return false
        }

        /* Comprobar que el año no sea superior al actual*/
        if (year > CURRENT_YEAR) {
            return false
        }
        console.log("El valor de fecha es correcto ");
        return true

    }

</script>

<script type="text/javascript">

    /*Solo numeros*/
    function ValidarNumero(event, controlId) {
        var numero = event.key;
        var regexNumero = /^[0-9]+$/;

        if (regexNumero.test(numero)) {
            $('#' + controlId).text("Valido");
            $('#' + controlId).css({ "color": "green" });
            return true;
        }
        else {
            $('#' + controlId).text("Solo acepta numeros");
            $('#' + controlId).css({ "color": "red" });
            return false;
        }
    }

    function ValidarContrasenas() {
        pass1 = document.getElementById("txtContrasena");
        pass2 = document.getElementById("txtContrasena2");
        if (pass1.value == pass2.value) {
            pass1.style.borderColor = "green";
            pass2.style.borderColor = "green";

            return true;
        }
        else {
            pass1.style.borderColor = "red";
            pass2.style.borderColor = "red";

            return false;

        }

    }
    function ValidarCorreos() {
        email1 = document.getElementById("txtCorreo");
        email2 = document.getElementById("txtCorreo2");
        if (email1.value == email2.value) {
            email1.style.borderColor = "green";
            email2.style.borderColor = "green";

            return true;
        }
        else {
            email1.style.borderColor = "red";
            email2.style.borderColor = "red";

            return false;
        }

    }

    function ValidarCurp() {
        var curp = document.getElementById("txtCurp").value;
        var regexCurp = /^[A-Z0-9]{1,18}$/;

        if (regexCurp.test(curp)) {

            document.getElementById("txtCurp").style.borderColor = "green";
            $('#lblErrorCurp').text("Valido");
            $('#lblErrorCurp').css({ "color": "green" });
            return true;
        }

        else {
            document.getElementById("txtCurp").style.borderColor = "red";
            $('#lblErrorCurp').text("El Curp no esta en mayusculas Vuelva a verificarlo");
            $('#lblErrorCurp').css({ "color": "red" });

            return false;
        }

    }
</script>
